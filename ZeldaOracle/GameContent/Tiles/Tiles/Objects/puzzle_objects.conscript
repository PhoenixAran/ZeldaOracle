#==============================================================
# Temp
#==============================================================

# Doors -------------------------------------------------------

TILE "temp_door";
	TYPE			TileDoor;
	SOLID			block;
	SPRITEINDEX	0,	"tile_door_closed";
	SPRITEINDEX	1,	"tile_door_open";
	SPRITEINDEX	2,	"tile_door_close";
	#PROPERTIES		(boolean, open, false, "Open", "", "Door", "True if the door open."),
	#				(integer, direction, 0, "Direction", "direction", "Door", "The direction the door is facing.", false);
END;
TILE "temp_small_key_door";
	#CLONE			"temp_door";
	TYPE			TileSmallKeyDoor;
	SOLID			block;
	#RESETWHEN		Never;
	SPRITEINDEX	0,	"tile_small_key_door_closed";
	SPRITEINDEX	1,	"tile_small_key_door_open";
	SPRITEINDEX	2,	"tile_small_key_door_close";
END;
TILE "temp_boss_key_door";
	CLONE			"temp_door";
	TYPE			TileBossKeyDoor;
	SOLID			block;
	#RESETWHEN		Never;
	SPRITEINDEX	0,	"tile_boss_key_door_closed";
	SPRITEINDEX	1,	"tile_boss_key_door_open";
	SPRITEINDEX	2,	"tile_boss_key_door_close";
END;
TILE "temp_minecart_door";
	#CLONE		"temp_door";
	TYPE			TileMinecartDoor;
	SOLID			block;
	SPRITEINDEX	0, "tile_minecart_door_closed";
	SPRITEINDEX	1, "tile_minecart_door_open";
	SPRITEINDEX	2, "tile_minecart_door_close";
END;

# Movable Statue ----------------------------------------------

TILE "temp_movable_statue";
	FLAGS		Movable;
	SOLID		block;
END;

# Color Tiles -------------------------------------------------

TILE "temp_color_jump_pad";
	TYPE		TileColorJumpPad;
	SPRITEINDEX	0, "tile_color_jump_pad_red";
	SPRITEINDEX 1, "tile_color_jump_pad_yellow";
	SPRITEINDEX 2, "tile_color_jump_pad_blue";
	#PROPERTIES	(integer, color, 0, "Color", ("enum", "PuzzleColor"), "Color", "The color of the jump pad.");
	#EVENT		color_change, "Color Change", "Color", "Occurs when the pad's color changes.", (ColorJumpPad, tile, PuzzleColor, color);
END;
TILE "temp_color_tile";
	TYPE		TileColorTile;
	SPRITEINDEX	0, "tile_color_tile_red";
	SPRITEINDEX 1, "tile_color_tile_yellow";
	SPRITEINDEX 2, "tile_color_tile_blue";
	#PROPERTIES	(integer, color, 0, "Color", ("enum", "PuzzleColor"), "Color", "The color of the tile.");
END;
TILE "temp_color_barrier";
	TYPE		TileColorBarrier;
	HALFSOLID	block;
	SPRITE		tile_color_barrier_red_raised;
	#PROPERTIES	(integer, color, 0, "Color", ("enum", "PuzzleColor"), "Color", "The color of the barrier (red or blue).");
END;
TILE "temp_color_statue";
	TYPE		TileColorStatue;
	SOLID		block;
	#FLAGS		Movable;
	#PROPERTIES	(integer, color, 0, "Color", ("enum", "PuzzleColor"), "Color", "The color of the statue.");
END;
TILE "temp_color_block";
	TYPE		TileColorBlock;
	SOLID		block;
	#PROPERTIES	(integer, color, 0, "Color", ("enum", "PuzzleColor"), "Color", "The color of the block.");
END;

# Minecart Tracks ---------------------------------------------

TILE "temp_minecart_track";
	TYPE		TileMinecartTrack;
	#FLAGS		NotCoverable;
	#RESETWHEN	LeaveArea;
	SPRITEINDEX	0, "tile_minecart_track_horizontal";	# Horizontal
	SPRITEINDEX	1, "tile_minecart_track_vertical";	# Vertical
	SPRITEINDEX	2, "tile_minecart_track_up_right";	# Right/Up
	SPRITEINDEX	3, "tile_minecart_track_up_left";		# Up/Left
	SPRITEINDEX	4, "tile_minecart_track_down_left";	# Left/Down
	SPRITEINDEX	5, "tile_minecart_track_down_right";	# Down/Right
	#PROPERTIES	(boolean, minecart, false, "Has Minecart", "", "Minecart", "Does this track currently have a minecart on it?"),
	#			(integer, switched_track_orientation, 0, "Switched Track Orientation", ("enum", "MinecartTrackOrientation"), "Minecart", ""),
	#			(integer, track_orientation, 0, "Track Orientation", ("enum", "MinecartTrackOrientation"), "Minecart", "");
END;

# Lava Mouth --------------------------------------------------

TILE "temp_lava_mouth";
	#TYPE		TileLavaMouth
	SOLID		block;
	RESETWHEN	Never;
END;

# Arrow Shooter -----------------------------------------------

TILE "temp_arrow_shooter";
	Type		TileArrowShooter;
	SOLID		block;
	#PROPERTIES
	#	(integer, direction, 0, "Direction", "direction",
	#		"Arrow Shooter", "The direction arrows are shot in.", false);
END;

# Fire Shooter ------------------------------------------------

TILE "temp_fire_shooter";
	Type		TileFireShooter;
	SOLID		block;
	#PROPERTIES
	#	(integer, direction, 0, "Direction", "direction",
	#		"Fire Shooter", "The direction fire is shot in.", false);
		
END;

# Tablet Slot -------------------------------------------------

TILE "temp_tablet_slot";
	#Type		TileTabletSlot;
	SOLID		block;
	RESETWHEN	Never;
END;


# Webbed Wall -------------------------------------------------

TILE "temp_wall_webbed";
	FLAGS		Burnable;
	SOLID		block;
	RESETWHEN	Never;
	PROPERTY	(disable_on_destroy, true);
END;

# Bridge ------------------------------------------------------

TILE "temp_bridge";
	TYPE		TileBridge;
	SPRITE		"tile_bridge_horizontal";
	#PROPERTIES	(boolean, vertical, false, "Vertical", "", "Bridge", "True if the bridge is vertical."),
	#			(integer, bridge_direction, -1, "Bridge Direction", "direction", "Bridge", "Direction the bridge is in.");
END;

#==============================================================
# Tiles
#==============================================================

# Doors -------------------------------------------------------

TILE "door_down";	CLONE "temp_door"; PROPERTY (direction, 3); PROPERTY (substrip_index, 3); BASICLEDGE block, down; END;
TILE "door_up";		CLONE "temp_door"; PROPERTY (direction, 1); PROPERTY (substrip_index, 1); BASICLEDGE block, up; END;
TILE "door_left";	CLONE "temp_door"; PROPERTY (direction, 2); PROPERTY (substrip_index, 2); BASICLEDGE block, left; END;
TILE "door_right";	CLONE "temp_door"; PROPERTY (direction, 0); PROPERTY (substrip_index, 0); BASICLEDGE block, right; END;

TILE "small_key_door_down";		CLONE "temp_small_key_door"; PROPERTY (direction, 3); PROPERTY (substrip_index, 3); BASICLEDGE block, down; END;
TILE "small_key_door_up";		CLONE "temp_small_key_door"; PROPERTY (direction, 1); PROPERTY (substrip_index, 1); BASICLEDGE block, up; END;
TILE "small_key_door_left";		CLONE "temp_small_key_door"; PROPERTY (direction, 2); PROPERTY (substrip_index, 2); BASICLEDGE block, left; END;
TILE "small_key_door_right";	CLONE "temp_small_key_door"; PROPERTY (direction, 0); PROPERTY (substrip_index, 0); BASICLEDGE block, right; END;

TILE "boss_key_door_down";	CLONE "temp_boss_key_door"; PROPERTY (direction, 3); PROPERTY (substrip_index, 3); BASICLEDGE block, down; END;
TILE "boss_key_door_up";	CLONE "temp_boss_key_door"; PROPERTY (direction, 1); PROPERTY (substrip_index, 1); BASICLEDGE block, up; END;
TILE "boss_key_door_left";	CLONE "temp_boss_key_door"; PROPERTY (direction, 2); PROPERTY (substrip_index, 2); BASICLEDGE block, left; END;
TILE "boss_key_door_right";	CLONE "temp_boss_key_door"; PROPERTY (direction, 0); PROPERTY (substrip_index, 0); BASICLEDGE block, right; END;

TILE "minecart_door_down";	CLONE "temp_minecart_door"; PROPERTY (direction, 3); PROPERTY (substrip_index, 3); BASICLEDGE block, down; END;
TILE "minecart_door_up";	CLONE "temp_minecart_door"; PROPERTY (direction, 1); PROPERTY (substrip_index, 1); BASICLEDGE block, up; END;
TILE "minecart_door_left";	CLONE "temp_minecart_door"; PROPERTY (direction, 2); PROPERTY (substrip_index, 2); BASICLEDGE block, left; END;
TILE "minecart_door_right";	CLONE "temp_minecart_door"; PROPERTY (direction, 0); PROPERTY (substrip_index, 0); BASICLEDGE block, right; END;

# Locked Block ------------------------------------------------

TILE "locked_block";
	TYPE		TileLockedBlock;
	SOLID		block;
	#RESETWHEN	Never;
	SAMESPRITE;
END;

# Statues -----------------------------------------------------

TILE "statue_stationary"; SAMESPRITE; SOLID block; END;
TILE "statue_alt_stationary"; SAMESPRITE; SOLID block; END;
TILE "movable_statue";
	CLONE		"temp_movable_statue";
	SAMESPRITE;
END;
TILE "movable_statue_alt";
	CLONE		"temp_movable_statue";
	SAMESPRITE;
END;
TILE "eye_statue";
	TYPE		TileEyeStatue;
	SOLID		block;
	SAMESPRITE;
END;
TILE "eye_statue_broken"; SAMESPRITE; SOLID block; END;
TILE "essense_statue"; SAMESPRITE; SOLID block; END;
TILE "plaque";
	TYPE		TileSign;
	SOLID		block;
	SAMESPRITE;
	#PROPERTIES
	#	(string, text, "Hello World!",
	#		"Text", "text_message", "Sign",
	#		"The text to display when the plaque is read from the front.");
END;

# Button ------------------------------------------------------

TILE "button";

	TYPE		TileButton;
	SPRITEINDEX	0, "tile_button_up";
	SPRITEINDEX	1, "tile_button_down";
	#PROPERTIES	(boolean, releasable,		true, "Releasable",			"", "Button", "Can the button only be pressed, and not released?"),
	#			(boolean, pressed,			false, "Pressed",			"", "Button", "Is the button pressed");
	#EVENT		press, "Press", "Switch", "Occurs when the button is pressed.", (Button button);
	#EVENT		release, "Release", "Switch", "Occurs when the button is released.", (Button button);
END;

# Lever -------------------------------------------------------

TILE "lever";
	TYPE		TileLever;
	HALFSOLID	block;
	FLAGS		AbsorbSeeds;
	SPRITEINDEX	0, "tile_lever_left";
	SPRITEINDEX	1, "tile_lever_right";
	#PROPERTIES	(boolean, switch_once,		false,	"Switch Once",		"", "Lever", "Can the lever only be switched once?"),
	#			(boolean, switch_state,		false,	"Switch State",		"", "Lever", "True if the lever is facing left.");
	#EVENT		toggle, "Toggle", "Switch", "Occurs when the lever is toggled.", (Lever, lever);
END;

# Lantern -----------------------------------------------------

TILE "lantern";
	TYPE		TileLantern;
	SOLID		block;
	SPRITEINDEX	0, "tile_lantern_lit";
	SPRITEINDEX	1, "tile_lantern_unlit";
	#PROPERTIES	(boolean, lit, true, "Lit", "", "", "Whether the lantern starts lit or not.");
	#EVENT		light, "Light", "Lanturn", "Occurs when the lantern is lighted.", (Lantern, lantern);
	#EVENT		put_out, "Put Out", "Lanturn", "Occurs when the lantern is put out.", (Lantern, lantern);
END;

# Color Jump Pad ----------------------------------------------

TILE "color_jump_pad_red";
	CLONE		"temp_color_jump_pad";
	PROPERTY	(color, 0);
	PROPERTY	(sprite_index, 0);
END;
TILE "color_jump_pad_yellow";
	CLONE		"temp_color_jump_pad";
	PROPERTY	(color, 1);
	PROPERTY	(sprite_index, 1);
END;
TILE "color_jump_pad_blue";
	CLONE		"temp_color_jump_pad";
	PROPERTY	(color, 2);
	PROPERTY	(sprite_index, 2);
END;

# Color Tile --------------------------------------------------

TILE "color_tile_red";
	CLONE		"temp_color_tile";
	PROPERTY	(color, 0);
	PROPERTY	(sprite_index, 0);
END;
TILE "color_tile_yellow";
	CLONE		"temp_color_tile";
	PROPERTY	(color, 1);
	PROPERTY	(sprite_index, 1);
END;
TILE "color_tile_blue";
	CLONE		"temp_color_tile";
	PROPERTY	(color, 2);
	PROPERTY	(sprite_index, 2);
END;

# Color Barrier -----------------------------------------------

TILE "color_barrier_red";
	CLONE		"temp_color_barrier";
	SPRITE		tile_color_barrier_red_lowered;
	PROPERTY	(color, 0);
END;
TILE "color_barrier_blue";
	CLONE		"temp_color_barrier";
	SPRITE		tile_color_barrier_blue_raised;
	PROPERTY	(color, 2);
END;

# Color Statue ------------------------------------------------

TILE "color_statue_red";
	CLONE		"temp_color_statue";
	SAMESPRITE;
	PROPERTY	(color, 0);
END;
TILE "color_statue_yellow";
	CLONE		"temp_color_statue";
	SAMESPRITE;
	PROPERTY	(color, 1);
END;
TILE "color_statue_blue";
	CLONE		"temp_color_statue";
	SAMESPRITE;
	PROPERTY	(color, 2);
END;

# Color Block -------------------------------------------------

TILE "color_block_red";
	CLONE		"temp_color_block";
	SAMESPRITE;
	PROPERTY	(color, 0);
END;
TILE "color_block_yellow";
	CLONE		"temp_color_block";
	SAMESPRITE;
	PROPERTY	(color, 1);
END;
TILE "color_block_blue";
	CLONE		"temp_color_block";
	SAMESPRITE;
	PROPERTY	(color, 2);
END;

# Color Lantern -----------------------------------------------

TILE "color_lantern";
	TYPE		TileColorLantern;
	SOLID		block;
	SAMESPRITE;
	#PROPERTIES	(integer, color, -1, "Color", ("enum", "PuzzleColor"), "Color", "The color of the lantern flames.");
	#EVENT		color_change, "Color Change", "Color", "Occurs when the lantern's flame color changes.", (ColorLantern, tile, PuzzleColor, color);
END;

# Color Cube Slot ---------------------------------------------

TILE "color_cube_slot";
	TYPE		TileColorCubeSlot;
	SAMESPRITE;
	#EVENT		color_change, "Color Change", "Color", "Occurs when the slot's color changes.", (ColorCubeSlot, tile, PuzzleColor, color);
END;

# Minecart Tracks ---------------------------------------------

TILE "minecart_track_horizontal";
	CLONE		"temp_minecart_track";
	PROPERTY	(track_orientation, 0);
END;
TILE "minecart_track_vertical";
	CLONE		"temp_minecart_track";
	PROPERTY	(track_orientation, 1);
END;
TILE "minecart_track_corner_down_right";
	CLONE		"temp_minecart_track";
	PROPERTY	(track_orientation, 5);
END;
TILE "minecart_track_corner_down_left";
	CLONE		"temp_minecart_track";
	PROPERTY	(track_orientation, 4);
END;
TILE "minecart_track_corner_up_right";
	CLONE		"temp_minecart_track";
	PROPERTY	(track_orientation, 2);
END;
TILE "minecart_track_corner_up_left";
	CLONE		"temp_minecart_track";
	PROPERTY	(track_orientation, 3);
END;
TILE "minecart_track_stop";
	TYPE	TileMinecartStop;
	FLAGS	NotCoverable;
	SAMESPRITE;
END;

# Lava Mouth --------------------------------------------------

TILE "lava_mouth_down";
	CLONE		"temp_lava_mouth";
	LEDGE		block, down;
	SAMESPRITE;
	SPRITEINDEX 1, "tile_lava_mouth_closed_down";
END;
TILE "lava_mouth_up";
	CLONE		"temp_lava_mouth";
	LEDGE		block, up;
	SAMESPRITE;
	SPRITEINDEX 1, "tile_lava_mouth_closed_up";
END;
TILE "lava_mouth_left";
	CLONE		"temp_lava_mouth";
	LEDGE		block, left;
	SAMESPRITE;
	SPRITEINDEX 1, "tile_lava_mouth_closed_left";
END;
TILE "lava_mouth_right";
	CLONE		"temp_lava_mouth";
	LEDGE		block, right;
	SAMESPRITE;
	SPRITEINDEX 1, "tile_lava_mouth_closed_right";
END;

# Arrow Shooter -----------------------------------------------

TILE "arrow_shooter_down";
	CLONE		"temp_arrow_shooter";
	BASICLEDGE	block, down;
	SAMESPRITE;
	PROPERTY	(direction, 3);
END;
TILE "arrow_shooter_up";
	CLONE		"temp_arrow_shooter";
	BASICLEDGE	block, up;
	SAMESPRITE;
	PROPERTY	(direction, 1);
END;
TILE "arrow_shooter_left";
	CLONE		"temp_arrow_shooter";
	BASICLEDGE	block, left;
	SAMESPRITE;
	PROPERTY	(direction, 2);
END;
TILE "arrow_shooter_right";
	CLONE		"temp_arrow_shooter";
	BASICLEDGE	block, right;
	SAMESPRITE;
	PROPERTY	(direction, 0);
END;

# Fire Shooter ------------------------------------------------

TILE "fire_shooter_down";
	CLONE		"temp_fire_shooter";
	BASICLEDGE	block, down;
	SAMESPRITE;
	PROPERTY	(direction, 3);
END;
TILE "fire_shooter_up";
	CLONE		"temp_fire_shooter";
	BASICLEDGE	block, up;
	SAMESPRITE;
	PROPERTY	(direction, 1);
END;
TILE "fire_shooter_left";
	CLONE		"temp_fire_shooter";
	BASICLEDGE	block, left;
	SAMESPRITE;
	PROPERTY	(direction, 2);
END;
TILE "fire_shooter_right";
	CLONE		"temp_fire_shooter";
	BASICLEDGE	block, right;
	SAMESPRITE;
	PROPERTY	(direction, 0);
END;

# Tablet Slot -------------------------------------------------

TILE "tablet_slot_down";
	CLONE		"temp_tablet_slot";
	BASICLEDGE	block, down;
	SAMESPRITE;
	SPRITEINDEX 1, "tile_tablet_slot_placed_down";
END;
TILE "tablet_slot_up";
	CLONE		"temp_tablet_slot";
	BASICLEDGE	block, up;
	SAMESPRITE;
	SPRITEINDEX 1, "tile_tablet_slot_placed_up";
END;
TILE "tablet_slot_left";
	CLONE		"temp_tablet_slot";
	BASICLEDGE	block, left;
	SAMESPRITE;
	SPRITEINDEX 1, "tile_tablet_slot_placed_left";
END;
TILE "tablet_slot_right";
	CLONE		"temp_tablet_slot";
	BASICLEDGE	block, right;
	SAMESPRITE;
	SPRITEINDEX 1, "tile_tablet_slot_placed_right";
END;

# Jump Ledge --------------------------------------------------

TILE "leap_ledge_down";		FLAGS NotPushable, NotGrabbable; SAMESPRITE; LEAPLEDGE down; END;
TILE "leap_ledge_up";		FLAGS NotPushable, NotGrabbable; SAMESPRITE; LEAPLEDGE up; END;
TILE "leap_ledge_left";		FLAGS NotPushable, NotGrabbable; SAMESPRITE; LEAPLEDGE left; END;
TILE "leap_ledge_right";	FLAGS NotPushable, NotGrabbable; SAMESPRITE; LEAPLEDGE right; END;

# Webbed Wall -------------------------------------------------

TILE "wall_webbed_down";
	CLONE		"temp_wall_webbed";
	BASICLEDGE	block, down;
	TILEBELOW	"wall_tunnel_down";
	SAMESPRITE;
END;
TILE "wall_webbed_up";
	CLONE		"temp_wall_webbed";
	BASICLEDGE	block, up;
	TILEBELOW	"wall_tunnel_up";
	SAMESPRITE;
END;
TILE "wall_webbed_left";
	CLONE		"temp_wall_webbed";
	BASICLEDGE	block, left;
	TILEBELOW	"wall_tunnel_left";
	SAMESPRITE;
END;
TILE "wall_webbed_right";
	CLONE		"temp_wall_webbed";
	BASICLEDGE	block, right;
	TILEBELOW	"wall_tunnel_right";
	SAMESPRITE;
END;

# Holes -------------------------------------------------------

TILE "pit_top"; SAMESPRITE; ENVTYPE Hole; END;
TILE "pit_mid"; SAMESPRITE; ENVTYPE Hole; END;
TILE "pit_bottom"; SAMESPRITE; ENVTYPE Hole; END;
TILE "pit_both"; SAMESPRITE; ENVTYPE Hole; END;
TILE "hole_top"; SAMESPRITE; ENVTYPE Hole; END;
TILE "hole_mid"; SAMESPRITE; ENVTYPE Hole; END;
TILE "hole_bottom"; SAMESPRITE; ENVTYPE Hole; END;
TILE "hole_both"; SAMESPRITE; ENVTYPE Hole; END;

TILE "hole"; SAMESPRITE; ENVTYPE Hole; END;
TILE "hole_alt"; SAMESPRITE; ENVTYPE Hole; END;

TILE "cracked_floor";
	TYPE		TileCrackedFloor;
	TILEBELOW	"hole";
	SAMESPRITE;
	#PROPERTIES	(boolean, silent, false, "Silent", "",
	#	"Cracked Floor", "True if the floor does not make a noise or animation upon crumbling.", false);
END;

# Hardened Lava -----------------------------------------------

TILE "hardened_lava"; SAMESPRITE; END;

# Floor Spikes ------------------------------------------------

TILE "floor_spikes";
	TYPE		TileSpikedFloor;
	SAMESPRITE;
END;

# Bridge ------------------------------------------------------

TILE "bridge_horizontal";
	CLONE		"temp_bridge";
	SAMESPRITE;
	PROPERTY	(vertical, false);
	PROPERTY	(bridge_direction, 0);
END;
TILE "bridge_vertical";
	CLONE		"temp_bridge";
	SAMESPRITE;
	PROPERTY	(vertical, true);
	PROPERTY	(bridge_direction, 3);
END;

# Ice Crystal Pit ---------------------------------------------

TILE "ice_crystal_pit";
	#TYPE		TileIceCrystalPit;
	SAMESPRITE;
END;

# Turnstile ---------------------------------------------------

TILE "turnstile";
	TYPE		TileTurnstile;
	SOLID       turnstile;
	SAMESPRITE;
	PREVIEW		"preview_turnstile_counterclockwise";
	#RESETWHEN	LeaveArea;
	#SIZE		(3, 3);
	#PROPERTIES	(boolean, clockwise, false, "Clockwise", "", "Turnstile", "True if the turnstile is in clockwise mode.");
END;

# Chest -------------------------------------------------------

TILE "chest";
	TYPE		TileChest;
	SOLID		block;
	#RESETWHEN	Never;
	SPRITEINDEX	0, "tile_chest";
	SPRITEINDEX	1, "tile_chest_opened";
	#PROPERTY	(spawn_delay_after_poof, 16);
	#PROPERTIES
	#	(string, reward, "rupees_1",
	#		"Reward", "reward", "Chest",
	#		 "The reward contained inside the chest."),
	#	(boolean, looted, "false",
	#		"Looted", "", "Chest",
	#		"True if the item has been taken from the chest.");
END;

# Reward ------------------------------------------------------

TILE "reward";
	TYPE		TileReward;
	FLAGS		NotCoverable;
	MODEL		center;
	#RESETWHEN	Never;
	#PROPERTIES
	#	(string, reward, "heart_piece",
	#		"Reward", "reward", "Reward",
	#		 "The reward to spawn."),
	#	(boolean, looted, "false",
	#		"Looted", "", "Reward",
	#		"True if the item has been taken.");
END;

# Digable Reward ----------------------------------------------

TILE "digable_reward";
	TYPE		TileDigableReward;
	#FLAGS		Digable;
	MODEL		center;
	#RESETWHEN	Never;
	PREVIEW		"preview_digable_reward";
	#PROPERTIES
	#	(string, reward, "heart_piece",
	#		"Reward", "reward", "Reward",
	#		 "The reward to spawn."),
	#	(boolean, looted, "false",
	#		"Looted", "", "Reward",
	#		"True if the item has been taken.");
END;

# Divable Reward ----------------------------------------------

TILE "divable_reward";
	TYPE		TileDivableReward;
	MODEL		center;
	#RESETWHEN	Never;
	PREVIEW		"preview_divable_reward";
	#PROPERTIES
	#	(string, reward, "heart_piece",
	#		"Reward", "reward", "Reward",
	#		 "The reward to spawn."),
	#	(boolean, looted, "false",
	#		"Looted", "", "Reward",
	#		"True if the item has been taken.");
END;